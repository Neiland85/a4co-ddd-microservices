
// Product Service - Schema de Base de Datos con Prisma ORM
// Siguiendo principios DDD: Aggregates, Entities, Value Objects
// Marketplace Local de Jaén - A4CO

generator client {
  provider = "prisma-client-js"
  output   = "../src/infrastructure/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AGREGADO PRINCIPAL - PRODUCTS
model Product {
  // Identificadores
  id         String @id @default(uuid()) @db.Uuid
  productId  String @unique @default(uuid()) @db.Uuid // Business ID
  
  // Información básica
  name        String @db.VarChar(200)
  description String @db.Text
  
  // Precio
  price    Decimal @db.Decimal(10, 2)
  currency String  @db.VarChar(3) @default("EUR")
  
  // Relaciones externas
  categoryId String @db.Uuid
  artisanId  String @db.Uuid
  
  // Estados
  status       ProductStatus       @default(DRAFT)
  availability ProductAvailability @default(IN_STOCK)
  
  // Información de artesanía
  craftingTimeHours   Int     @default(0)
  sustainabilityScore Int?    @db.SmallInt // 0-100
  isCustomizable      Boolean @default(false)
  
  // Arrays JSON para simplicidad
  materials String[] @default([])
  
  // Dimensiones (JSON para flexibilidad)
  dimensions Json?
  
  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  // ENTIDADES DEL AGREGADO
  variants ProductVariant[]
  images   ProductImage[]
  tags     ProductTag[]
  // Se elimina la relación ambigua con ProductReview y ProductCategoryMapping
  @@index([artisanId])
  @@index([status])
  @@index([availability])
  @@index([name])
  @@index([createdAt])
  @@map("products")
  
  // Relaciones externas
  artisan Artisan @relation(fields: [artisanId], references: [id])
  inventory ProductInventory[]
  reviews ProductReview[]
  categoryMappings ProductCategoryMapping[]
}

// ENTIDAD - PRODUCT VARIANTS
model ProductVariant {
  // Identificadores
  id        String @id @default(uuid()) @db.Uuid
  productId String @db.Uuid
  
  // Información básica
  name        String  @db.VarChar(200)
  description String? @db.Text
  
  // Precio específico de la variante
  price    Decimal @db.Decimal(10, 2)
  currency String  @db.VarChar(3) @default("EUR")
  
  // SKU único por variante
  sku String? @unique @db.VarChar(100)
  
  // Atributos específicos (JSON para flexibilidad)
  attributes Json @default("{}")
  
  // Estado
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  // Relación con Product (parte del agregado)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Índices
  @@index([productId])
  @@index([isActive])
  @@index([sku])
  @@map("product_variants")
}

// ENTIDAD - PRODUCT IMAGES
model ProductImage {
  // Identificadores
  id        String @id @default(uuid()) @db.Uuid
  productId String @db.Uuid
  
  // Información de la imagen
  url     String @db.VarChar(500)
  altText String @db.VarChar(200)
  
  // Ordenamiento y características
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)
  
  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  // Relación con Product (parte del agregado)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Índices
  @@index([productId])
  @@index([isPrimary])
  @@index([sortOrder])
  @@map("product_images")
}

// ENTIDAD - PRODUCT TAGS
model ProductTag {
  // Identificadores
  id        String @id @default(uuid()) @db.Uuid
  productId String @db.Uuid
  
  // Información del tag
  name String @db.VarChar(50)
  
  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  // Relación con Product (parte del agregado)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Índices
  @@index([productId])
  @@index([name])
  @@unique([productId, name])
  @@map("product_tags")
}

// TABLA DE REFERENCIA - CATEGORIES (externa al agregado)
model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(100)
  description String? @db.Text
  parentId    String? @db.Uuid
  
  // Jerarquía
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  ProductCategoryMapping ProductCategoryMapping[]
  
  @@index([parentId])
  @@map("categories")
}

// ========================================
// ARTISAN ENTITY (Reference from other bounded context)
// ========================================

model Artisan {
  id              String   @id @default(cuid())
  
  // Basic Information
  businessName    String
  contactName     String
  email           String   @unique
  phone           String?
  
  // Location (Value Object)
  address         Json
  
  // Business Information
  description     String?
  specialties     String[]
  
  // Verification and Status
  isVerified      Boolean  @default(false)
  verificationDate DateTime?
  status          ArtisanStatus @default(PENDING)
  
  // Business Metrics
  rating          Float?   @default(0)
  totalProducts   Int      @default(0)
  totalSales      Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  products        Product[]
  
  @@map("artisans")
  @@index([email])
  @@index([isVerified])
  @@index([status])
}

// ========================================
// INVENTORY TRACKING (Separate bounded context integration)
// ========================================

model ProductInventory {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Stock Information
  quantity      Int      @default(0)
  reserved      Int      @default(0)
  available     Int      @default(0)
  
  // Thresholds
  lowStockThreshold Int @default(5)
  
  // Tracking
  lastRestocked DateTime?
  lastSold      DateTime?
  
  // Location
  location      String   @default("main")
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("product_inventory")
  @@unique([productId, location])
  @@index([productId])
  @@index([quantity])
}

// ========================================
// PRODUCT REVIEWS (Read model for analytics)
// ========================================

model ProductReview {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Review Content
  rating      Int
  title       String?
  comment     String?
  
  // Reviewer Information
  userId      String
  userName    String
  userEmail   String?
  
  // Review Status
  status      ReviewStatus @default(PENDING)
  isVerified  Boolean  @default(false)
  
  // Moderation
  moderatedBy String?
  moderatedAt DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("product_reviews")
  @@index([productId])
  @@index([rating])
  @@index([status])
  @@index([createdAt])
}

// ========================================
// MANY-TO-MANY RELATIONSHIPS
// ========================================

model ProductCategoryMapping {
  id         String   @id @default(cuid())
  productId  String
  categoryId String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@unique([productId, categoryId])
  @@map("product_category_mappings")
}

// ========================================
// ENUMS
// ========================================

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum ProductAvailability {
  IN_STOCK
  OUT_OF_STOCK
  MADE_TO_ORDER
  SEASONAL
}

enum ImageType {
  GALLERY
  THUMBNAIL
  HERO
  DETAIL
  LIFESTYLE
}

enum SpecificationType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  URL
  COLOR
}

enum ArtisanStatus {
  PENDING
  VERIFIED
  SUSPENDED
  INACTIVE
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}