# Default values for a4co-observability
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # Global values that can be accessed by all subcharts
  domain: a4co.local
  storageClass: standard
  
prometheus:
  enabled: true
  alertmanager:
    enabled: true
    persistentVolume:
      enabled: true
      size: 10Gi
  server:
    persistentVolume:
      enabled: true
      size: 50Gi
    retention: "30d"
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    configMapOverrideName: prometheus-config
    extraFlags:
      - web.enable-lifecycle
      - storage.tsdb.retention.size=45GB
  nodeExporter:
    enabled: true
  pushgateway:
    enabled: false
  kubeStateMetrics:
    enabled: true

grafana:
  enabled: true
  adminPassword: "admin" # Change in production
  persistence:
    enabled: true
    size: 10Gi
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://{{ .Release.Name }}-prometheus-server
          access: proxy
          isDefault: true
        - name: Jaeger
          type: jaeger
          url: http://{{ .Release.Name }}-jaeger-query:16686
          access: proxy
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: "grafana-dashboards"
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - grafana.{{ .Values.global.domain }}
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.{{ .Values.global.domain }}

jaeger:
  enabled: true
  provisionDataStore:
    cassandra: false
    elasticsearch: true
    kafka: false
  storage:
    type: elasticsearch
    elasticsearch:
      host: elasticsearch-master
      port: 9200
  collector:
    service:
      zipkin:
        port: 9411
      grpc:
        port: 14250
      http:
        port: 14268
  query:
    service:
      type: ClusterIP
      port: 16686
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - jaeger.{{ .Values.global.domain }}
      tls:
        - secretName: jaeger-tls
          hosts:
            - jaeger.{{ .Values.global.domain }}

opentelemetry-collector:
  enabled: true
  mode: deployment
  replicaCount: 2
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      memory_limiter:
        check_interval: 1s
        limit_mib: 512
      attributes:
        actions:
          - key: environment
            value: production
            action: upsert
    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
      jaeger:
        endpoint: "{{ .Release.Name }}-jaeger-collector:14250"
        tls:
          insecure: true
      logging:
        loglevel: info
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, attributes]
          exporters: [jaeger, logging]
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, batch, attributes]
          exporters: [prometheus, logging]

# Additional components
elasticsearch:
  enabled: false # Enable if using Elasticsearch for Jaeger storage
  
# Custom A4CO configurations
a4co:
  microservices:
    # List of microservices to monitor
    services:
      - name: product-service
        port: 9090
      - name: order-service
        port: 9090
      - name: user-service
        port: 9090
      - name: payment-service
        port: 9090
      - name: inventory-service
        port: 9090
      - name: notification-service
        port: 9090
      - name: event-service
        port: 9090
      - name: geo-service
        port: 9090
      - name: loyalty-service
        port: 9090
      - name: chat-service
        port: 9090
      - name: cms-service
        port: 9090
      - name: analytics-service
        port: 9090
      - name: artisan-service
        port: 9090
    
  frontend:
    services:
      - name: web
        port: 9090
      - name: dashboard-web
        port: 9090
  
  alerts:
    enabled: true
    # Custom alert rules will be created
    
  dashboards:
    enabled: true
    # Custom Grafana dashboards will be provisioned