version: '3.8'

services:
  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: a4co-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - a4co-observability

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: a4co-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=a4co-admin-2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - a4co-observability
    depends_on:
      - prometheus

  # Jaeger para tracing distribuido
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: a4co-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_HTTP_PORT=4318
      - COLLECTOR_OTLP_GRPC_PORT=4317
    restart: unless-stopped
    networks:
      - a4co-observability

  # OpenTelemetry Collector para procesamiento de telemetría
  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    container_name: a4co-otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics
      - "8889:8889"   # Prometheus metrics
    volumes:
      - ./otel-collector-config.yml:/etc/otelcol/config.yaml
    command: ["--config", "/etc/otelcol/config.yaml"]
    restart: unless-stopped
    networks:
      - a4co-observability
    depends_on:
      - jaeger
      - prometheus

  # Alertmanager para gestión de alertas
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: a4co-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
    restart: unless-stopped
    networks:
      - a4co-observability

  # Loki para logs centralizados
  loki:
    image: grafana/loki:2.9.0
    container_name: a4co-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    restart: unless-stopped
    networks:
      - a4co-observability

  # Promtail para recolección de logs
  promtail:
    image: grafana/promtail:2.9.0
    container_name: a4co-promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - a4co-observability
    depends_on:
      - loki

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

networks:
  a4co-observability:
    driver: bridge
    name: a4co-observability