version: '3.8'

services:
  # NATS Server with JetStream
  nats:
    image: nats:2.10-alpine
    container_name: a4co-nats
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--max_file_store=10GB",
      "--max_memory_store=1GB",
      "--http_port=8222",
      "--cluster_name=a4co-marketplace",
      "--cluster=nats://0.0.0.0:6222",
      "--routes=nats-route://nats:6222"
    ]
    ports:
      - "4222:4222"   # Client connections
      - "8222:8222"   # HTTP monitoring
      - "6222:6222"   # Cluster connections
    volumes:
      - nats_data:/data
      - ./config/nats:/etc/nats-config
    networks:
      - a4co-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # NATS Box for administration
  nats-box:
    image: natsio/nats-box:latest
    container_name: a4co-nats-box
    depends_on:
      - nats
    networks:
      - a4co-network
    command: ["sleep", "infinity"]
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: a4co-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - a4co-network
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: a4co-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - a4co-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: a4co-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - a4co-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: a4co-jaeger
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP agent
    networks:
      - a4co-network
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: a4co-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - a4co-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: a4co-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - a4co-network
    restart: unless-stopped

volumes:
  nats_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  a4co-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16