version: '3.8'

services:
  # Traefik - Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: a4co-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - a4co-network

  # Design System Storybook
  design-system:
    build:
      context: ./packages/design-system
      dockerfile: Dockerfile.dev
    container_name: a4co-design-system
    volumes:
      - ./packages/design-system:/app
      - /app/node_modules
    ports:
      - "6006:6006"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.design.rule=Host(`design.localhost`)"
      - "traefik.http.services.design.loadbalancer.server.port=6006"
    environment:
      - NODE_ENV=development
    networks:
      - a4co-network

  # Frontend - Next.js Applications
  web-a-head:
    build:
      context: ./apps/web/v0dev/a-head
      dockerfile: Dockerfile.dev
    container_name: a4co-web-head
    volumes:
      - ./apps/web/v0dev/a-head:/app
      - ./packages/design-system:/packages/design-system
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://api.localhost
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    networks:
      - a4co-network

  # Dashboard Web
  dashboard-web:
    build:
      context: ./apps/dashboard-web
      dockerfile: Dockerfile.dev
    container_name: a4co-dashboard
    volumes:
      - ./apps/dashboard-web:/app
      - ./packages/design-system:/packages/design-system
      - /app/node_modules
    environment:
      - NODE_ENV=development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3001"
    networks:
      - a4co-network

  # API Gateway
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile.dev
    container_name: a4co-api-gateway
    volumes:
      - ./apps/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=3333"
    depends_on:
      - redis
    networks:
      - a4co-network

  # Microservices
  product-service:
    build:
      context: ./apps/product-service
      dockerfile: Dockerfile.dev
    container_name: a4co-product-service
    volumes:
      - ./apps/product-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/products
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - nats
    networks:
      - a4co-network

  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile.dev
    container_name: a4co-user-service
    volumes:
      - ./apps/user-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/users
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - nats
    networks:
      - a4co-network

  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    container_name: a4co-postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=products,users,orders,inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - a4co-network

  redis:
    image: redis:7.2-alpine
    container_name: a4co-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - a4co-network

  nats:
    image: nats:2.10-alpine
    container_name: a4co-nats
    command: ["--jetstream", "--store_dir=/data"]
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data
    networks:
      - a4co-network

  # Hot Reload Sync Service
  sync-service:
    build:
      context: ./scripts/sync
      dockerfile: Dockerfile
    container_name: a4co-sync
    volumes:
      - ./:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - a4co-network

volumes:
  postgres_data:
  redis_data:
  nats_data:

networks:
  a4co-network:
    driver: bridge