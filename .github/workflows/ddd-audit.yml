---
name: DDD Microservices Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar cada lunes a las 9 AM
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  ddd-structure-analysis:
    runs-on: ubuntu-latest
    name: Análisis de Estructura DDD
    
    steps:
    - name: Checkout code
      run: |
        git clone --depth 1 --branch ${{ github.ref_name }} https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git .
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Configurar entorno
      run: |
        chmod +x scripts/*.sh
        mkdir -p audit-reports
    
    - name: Análisis de estructura DDD
      run: |
        echo "=== Análisis de Estructura DDD ===" > audit-reports/ddd-structure.txt
        echo "Bounded Contexts: $(find . -name "*BoundedContext*" | wc -l)" >> audit-reports/ddd-structure.txt
        echo "Aggregates: $(find . -name "*Aggregate*" | wc -l)" >> audit-reports/ddd-structure.txt
        echo "Entities: $(find . -name "*Entity*" | wc -l)" >> audit-reports/ddd-structure.txt
        echo "Value Objects: $(find . -name "*ValueObject*" -o -name "*VO*" | wc -l)" >> audit-reports/ddd-structure.txt
        echo "Domain Events: $(find . -name "*Event*" | wc -l)" >> audit-reports/ddd-structure.txt
        echo "Repositories: $(find . -name "*Repository*" | wc -l)" >> audit-reports/ddd-structure.txt
    
    - name: Subir reporte de estructura
      run: |
        echo "Reporte de estructura DDD generado:"
        cat audit-reports/ddd-structure.txt

  code-quality-metrics:
    runs-on: ubuntu-latest
    name: Métricas de Calidad de Código
    
    steps:
    - name: Checkout code
      run: |
        git clone --depth 1 --branch ${{ github.ref_name }} https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git .
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Instalar herramientas
      run: |
        pip install lizard
        sudo apt-get update
        sudo apt-get install -y cloc
        mkdir -p audit-reports
    
    - name: Análisis de complejidad
      run: |
        lizard . -o audit-reports/complexity.html
        lizard . -C 10 -L 100 -a 5 | tail -20 > audit-reports/complexity-summary.txt
    
    - name: Análisis de líneas de código
      run: |
        cloc . --out=audit-reports/cloc-report.txt --exclude-dir=node_modules,vendor,.git
    
    - name: Subir reportes de calidad
      run: |
        echo "Reportes de calidad generados:"
        ls -la audit-reports/

  language-specific-analysis:
    runs-on: ubuntu-latest
    name: Análisis Específico por Lenguaje
    
    steps:
    - name: Checkout code
      run: |
        git clone --depth 1 --branch ${{ github.ref_name }} https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git .
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Detectar lenguaje principal
      id: detect-language
      run: |
        mkdir -p audit-reports
        if [ $(find . -name "*.java" | wc -l) -gt 0 ]; then
          echo "language=java" >> $GITHUB_OUTPUT
        elif [ $(find . -name "*.cs" | wc -l) -gt 0 ]; then
          echo "language=csharp" >> $GITHUB_OUTPUT
        elif [ $(find . -name "*.ts" | wc -l) -gt 0 ]; then
          echo "language=typescript" >> $GITHUB_OUTPUT
        elif [ $(find . -name "*.py" | wc -l) -gt 0 ]; then
          echo "language=python" >> $GITHUB_OUTPUT
        elif [ $(find . -name "*.go" | wc -l) -gt 0 ]; then
          echo "language=unknown" >> $GITHUB_OUTPUT
        else
          echo "language=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Java
      if: steps.detect-language.outputs.language == 'java'
      run: |
        # Use Java that's already available
        java --version
        javac --version