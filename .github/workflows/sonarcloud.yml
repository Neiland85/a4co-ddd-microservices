name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Install required tools
        shell: bash
        run: |
          # Update package list and install required tools
          sudo apt-get update
          sudo apt-get install -y git wget unzip
      
      - name: Checkout code
        shell: bash
        run: |
          # Clone the repository with full history
          git clone https://github.com/${{ github.repository }}.git .          
          # Checkout the appropriate ref
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git checkout ${{ github.event.pull_request.head.sha }}
          else
            git checkout ${{ github.sha }}
          fi
      
      - name: Setup Node.js and pnpm
        shell: bash
        run: |
          # Install Node.js 20 using NodeSource repository
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verify Node.js installation
          node --version
          npm --version
          
          # Install pnpm
          npm install -g pnpm@10.9.0
          pnpm --version
      
      - name: Cache pnpm store
        id: pnpm-cache
        shell: bash
        run: |
          # Get pnpm store path
          STORE_PATH=$(pnpm store path)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_OUTPUT
          
          # Create cache directory
          CACHE_DIR="$HOME/.workflow-cache"
          mkdir -p "$CACHE_DIR"
          
          # Generate cache key based on lock file
          if [ -f pnpm-lock.yaml ]; then
            LOCKFILE_HASH=$(sha256sum pnpm-lock.yaml | cut -d' ' -f1)
          else
            echo "Warning: pnpm-lock.yaml not found. Using 'no-lockfile' as cache key suffix."
            LOCKFILE_HASH="no-lockfile"
          fi
          CACHE_KEY="${{ runner.os }}-pnpm-store-${LOCKFILE_HASH}"
          CACHE_FILE="$CACHE_DIR/${CACHE_KEY}.tar.gz"
          
          # Try to restore cache
          if [ -f "$CACHE_FILE" ]; then
            echo "Restoring pnpm cache from $CACHE_FILE"
            tar -xzf "$CACHE_FILE" -C "$STORE_PATH"
          else
            echo "No cache found"
          fi
          
          # Save cache file path for later
          echo "CACHE_FILE=$CACHE_FILE" >> $GITHUB_ENV
          echo "CACHE_EXISTS=$([ -f "$CACHE_FILE" ] && echo "true" || echo "false")" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Save pnpm cache
        if: env.CACHE_EXISTS != 'true'
        shell: bash
        run: |
          # Save cache if it doesn't exist
          echo "Saving pnpm cache to $CACHE_FILE"
          STORE_PATH=$(pnpm store path)
          tar -czf "$CACHE_FILE" "$STORE_PATH"
      
      - name: Run tests with coverage
        run: |
          pnpm run test:coverage || true
          # Merge coverage reports if they exist in multiple locations
          if [ -d "coverage" ]; then
            echo "Coverage directory found"
            ls -la coverage/
          fi
        env:
          CI: true
      
      - name: Generate coverage report
        run: |
          # Ensure coverage directory exists
          mkdir -p coverage
          
          # Find and merge all lcov.info files
          find . -name "lcov.info" -not -path "./node_modules/*" -not -path "./.next/*" | while read lcov; do
            echo "Found coverage file: $lcov"
            cat "$lcov" >> coverage/lcov.info.tmp
          done
          
          # Remove duplicates and create final report
          if [ -f "coverage/lcov.info.tmp" ]; then
            sort -u coverage/lcov.info.tmp > coverage/lcov.info
            rm coverage/lcov.info.tmp
            echo "Final coverage report size: $(wc -l < coverage/lcov.info) lines"
          else
            echo "No coverage files found, creating empty report"
            touch coverage/lcov.info
          fi
      
      - name: SonarCloud Scan
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Download SonarCloud Scanner
          SCANNER_VERSION="5.0.1.3006"
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SCANNER_VERSION}-linux.zip
          unzip -q sonar-scanner-cli-${SCANNER_VERSION}-linux.zip
          
          # Set up scanner
          export PATH="$PWD/sonar-scanner-${SCANNER_VERSION}-linux/bin:$PATH"
          
          # Configure scanner arguments
          SONAR_ARGS="-Dsonar.host.url=https://sonarcloud.io"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.projectKey=a4co-ddd-microservices"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.organization=a4co"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/*.test.tsx,**/*.spec.tsx,**/test/**,**/tests/**,**/__tests__/**,**/node_modules/**,**/dist/**,**/build/**,**/.next/**,**/coverage/**"
          SONAR_ARGS="$SONAR_ARGS -Dsonar.cpd.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**,**/dist/**"
          
          # Add GitHub-specific properties
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SONAR_ARGS="$SONAR_ARGS -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}"
            SONAR_ARGS="$SONAR_ARGS -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}"
            SONAR_ARGS="$SONAR_ARGS -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}"
          else
            SONAR_ARGS="$SONAR_ARGS -Dsonar.branch.name=${{ github.ref_name }}"
          fi
          
          # Run scanner
          sonar-scanner $SONAR_ARGS
          
          # Cleanup
          rm -rf sonar-scanner-*
