---
name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop, master]
  push:
    branches: [main, develop, master]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job de calidad del cÃ³digo
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Check code formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run type-check

  # Job de testing y cobertura
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter "./packages/*" build

      - name: Run tests with coverage
        run: pnpm run test:coverage

      - name: Generate coverage report
        run: pnpm run coverage:merge

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage/
            apps/*/coverage/
            packages/*/coverage/

  # Job de build y deployment
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm run build:all

      - name: Build Docker images
        run: |
          docker build -t a4co-auth-service:latest apps/auth-service/
          docker build -t a4co-product-service:latest apps/product-service/
          docker build -t a4co-user-service:latest apps/user-service/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # AquÃ­ irÃ­an los comandos de deployment reales

      - name: Notify deployment success
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "ðŸš€ Services are now running in staging"
