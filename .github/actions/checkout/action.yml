name: 'Checkout'
description: 'Checkout a repository or a Git reference'
inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  ref:
    description: 'The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.'
  token:
    description: 'Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT. We recommend using a service account with the minimum permissions necessary. When using a PAT, the token must have at least the `repo` scope. For public repositories, you can use the `GITHUB_TOKEN` instead of a PAT. See https://docs.github.com/en/actions/security-guides/authentication-in-actions#about-the-github_token for more information.'
    default: ${{ github.token }}
  ssh-key:
    description: 'SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key. We recommend using a service account with the minimum permissions necessary. When using an SSH key, the SSH key must have at least the `repo` scope. For public repositories, you can use the `GITHUB_TOKEN` instead of an SSH key. See https://docs.github.com/en/actions/security-guides/authentication-in-actions#about-the-github_token for more information.'
  ssh-known-hosts:
    description: 'Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility ssh-keyscan. For example, ssh-keyscan github.com. The public SSH keys for a host may be obtained using the utility ssh-keyscan. For example, ssh-keyscan github.com.'
    default: github.com
  ssh-strict:
    description: 'Whether to perform strict key validation. When true, the action will fail the job if any host keys were not present in the known_hosts. When false, the action will fallback to using the legacy ssh-keyscan behavior.'
    default: 'true'
  persist-credentials:
    description: 'Whether to configure the token or SSH key with the local git config'
    default: 'true'
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
  clean:
    description: 'Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
    default: 'true'
  fetch-depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    default: '1'
  lfs:
    description: 'Whether to download Git-LFS (Large File Storage) objects. Default is false.'
    default: 'false'
  submodules:
    description: 'Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules.'
    default: 'false'
  set-safe-directory:
    description: 'Add repository path to the list of safe directories for Git global config. See https://git-scm.com/docs/git-config#Documentation/git-config.txt-safedirectory for more information.'
    default: 'true'
  github-server-url:
    description: 'The base URL for the GitHub instance that you are running this action from, use with GitHub Enterprise Server. For example: https://github.company.com.'
    default: 'https://github.com'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      shell: bash
      run: |
        git clone --depth ${{ inputs.fetch-depth }} --branch ${{ inputs.ref }} ${{ inputs.repository }} ${{ inputs.path }}
        cd ${{ inputs.path }}
        if [ "${{ inputs.clean }}" = "true" ]; then
          git clean -ffdx
          git reset --hard HEAD
        fi
